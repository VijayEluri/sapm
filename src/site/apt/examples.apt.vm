 ------
 Usage
 ------
 Karl Heinz Marbaise
 ------
 06 January 2011
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Examples

* First simple example

  You would like to define a configuration like the following
  with SAPM.

+----
[/]
* = r
[repository:/test]
harry = rw
brian = rw
+----

  First we need an instance of AccessRules class which stores
  all the rules.

+----
AccessRules accessRules = new AccessRules();
+----

  The next step is to create the first rule

+----
[/]
* = r
+----

  This can be achieved by using the following code snippet:

+----
User user = UserFactory.createInstance("*");
AccessRule accessRuleRoot = new AccessRule("/");
accessRuleRoot.add(user, AccessLevel.READ);
accessRules.add(accessRuleRoot);
+----

  Now you have to create the second rule part.

+----
[repository:/test]
harry = rw
brian = rw
+----

  The second part can be done with the following code:

+----
User userHarry = UserFactory.createInstance("harry");
User userBrian = UserFactory.createInstance("brian");

AccessRule accessRule = new AccessRule("repository", "/test/trunk");
accessRule.add(userHarry, AccessLevel.READ_WRITE);
accessRule.add(userMicheal, AccessLevel.READ_WRITE);
accessRules.add(accessRule);
+----

  The final step is now that you check a user against the
  defined rules.

+----
AccessLevel userPermission = accessRules.getAccess(user, repository, accessPath);
+----

  The user represents the <<<user>>> which tries to get access
  to the <<<repository>>> in the given <<<path>>>.
